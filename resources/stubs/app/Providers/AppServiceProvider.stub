<?php

namespace App\Providers;

use AhmetShen\StarterKits\Models\Module;
use AhmetShen\StarterKits\Observers\ModuleObserver;
use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Facades\View;
use Illuminate\Support\ServiceProvider;
use Spatie\Flash\Flash;
use Yazan\Setting\Setting;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot(): void
    {
        if ($this->app->environment('production')) {
            URL::forceScheme('https');
        }

        $this->modelObserve();

        $this->viewShareData();

        $this->setLocale();

        $this->setConfig();

        $this->bladeComponent();

        $this->flashLevels();
    }

    /**
     * Model observers.
     *
     * @return void
     */
    protected function modelObserve(): void
    {
        Module::observe(ModuleObserver::class);
    }

    /**
     * View share data.
     *
     * @return void
     */
    protected function viewShareData(): void
    {
        $getGroups = \Yazan\Setting\Models\Setting::select('group')->distinct()->get();

        foreach ($getGroups as $getGroup) {
            View::share($getGroup->group, Setting::group($getGroup->group));

            unset($getGroup);
        }
    }

    /**
     * Locale settings.
     *
     * @return void
     */
    protected function setLocale(): void
    {
        app()->setLocale(setting('locale', 'config.app'));

        date_default_timezone_set(setting('timezone', 'config.app'));

        ini_set('date.timezone', setting('timezone', 'config.app'));

        setlocale(LC_ALL, setting('locale', 'config.app'));
    }

    /**
     * Config value set.
     *
     * @return void
     */
    protected function setConfig(): void
    {
        $this->setApp();

        $this->setSession();

        $this->setRecaptcha();

        $this->setMail();

        $this->setOther();
    }

    /**
     * App config value set.
     *
     * @return void
     */
    protected function setApp(): void
    {
        config([
            'app.name' => setting('name', 'config.app'),
            'app.env' => setting('env', 'config.app'),
            'app.debug' => checkSettingStatus('debug', 'config.app'),
            'app.url' => setting('url', 'config.app'),
            'app.asset_url' => setting('url', 'config.app'),
            'app.timezone' => setting('timezone', 'config.app'),
            'app.locale' => setting('locale', 'config.app'),
        ]);
    }

    /**
     * Session config value set.
     *
     * @return void
     */
    protected function setSession(): void
    {
        config([
            'session.driver' => setting('driver', 'config.session'),
            'session.lifetime' => setting('lifetime', 'config.session'),
            'session.expire_on_close' => true,
        ]);
    }

    /**
     * Recaptcha config value set.
     *
     * @return void
     */
    protected function setRecaptcha(): void
    {
        config([
            'recaptcha.api_site_key' => setting('site_key', 'config.recaptcha'),
            'recaptcha.api_secret_key' => setting('secret_key', 'config.recaptcha'),
            'recaptcha.default_language' => setting('locale', 'config.app'),
            'recaptcha.skip_ip' => setting('skip_ip', 'config.recaptcha'),
        ]);
    }

    /**
     * Mail config value set.
     *
     * @return void
     */
    protected function setMail(): void
    {
        $options = mailConfiguration();

        config([
            'mail.mailers.smtp.host' => $options['mail_host'],
            'mail.mailers.smtp.port' => $options['mail_port'],
            'mail.mailers.smtp.encryption' => $options['mail_encryption'],
            'mail.mailers.smtp.username' => $options['mail_address'],
            'mail.mailers.smtp.password' => $options['mail_password'],
            'mail.from.address' => $options['mail_from_address'],
            'mail.from.name' => setting('name', 'config.app'),
        ]);
    }

    /**
     * Other config value set.
     *
     * @return void
     */
    protected function setOther(): void
    {
        config([
            'logging.default' => 'daily',
            'auth.password_timeout' => setting('password_timeout', 'config.auth'),
            'authentication-log.notify' => checkSettingStatus('notify', 'config.authentication_log'),
            'breadcrumbs.view' => anonymousComponentNamespace('dashboard').'.breadcrumbs',
        ]);
    }

    /**
     * Blade components namespaces.
     *
     * @return void
     */
    protected function bladeComponent(): void
    {
        $components = configValue('components');

        foreach ($components as $component) {
            Blade::anonymousComponentNamespace(anonymousComponentNamespace($component), $component);

            unset($component);
        }

        Blade::componentNamespace('AhmetShen\\StarterKits\\View\\Components\\Dashboard', 'dashboard');

        Blade::componentNamespace('AhmetShen\\StarterKits\\View\\Components\\Ui', 'ui');
    }

    /**
     * Flash levels.
     *
     * @return void
     */
    protected function flashLevels(): void
    {
        Flash::levels(configValue('levels'));
    }
}
