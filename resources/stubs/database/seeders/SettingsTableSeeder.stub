<?php

namespace Database\Seeders;

// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Str;
use Yazan\Setting\Setting;

class SettingsTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run(): void
    {
        $this->config();

        $this->length();

        $this->route();

        $this->general();

        $this->maintenance();

        $this->dashboardThemeOption();

        $this->color();
    }

    /**
     * Config settings.
     *
     * @return void
     */
    protected function config(): void
    {
        $data = [
            [
                'key' => 'locale',
                'value' => 'tr',
                'group' => 'config.app',
            ],
            [
                'key' => 'timezone',
                'value' => 'Europe/Istanbul',
                'group' => 'config.app',
            ],
            [
                'key' => 'name',
                'value' => 'StarterKits',
                'group' => 'config.app',
            ],
            [
                'key' => 'env',
                'value' => (app()->environment('local')) ? 'local' : 'production',
                'group' => 'config.app',
            ],
            [
                'key' => 'debug',
                'value' => (app()->environment('local')) ? 'active' : 'passive',
                'group' => 'config.app',
            ],
            [
                'key' => 'url',
                'value' => 'http://starter-kits.test',
                'group' => 'config.app',
            ],
            [
                'key' => 'driver',
                'value' => 'database',
                'group' => 'config.session',
            ],
            [
                'key' => 'lifetime',
                'value' => 60,
                'group' => 'config.session',
            ],
            [
                'key' => 'password_timeout',
                'value' => 1800,
                'group' => 'config.auth',
            ],
            [
                'key' => 'site_key',
                'value' => (app()->environment('local')) ? '-' : '',
                'group' => 'config.recaptcha',
            ],
            [
                'key' => 'secret_key',
                'value' => (app()->environment('local')) ? '-' : '',
                'group' => 'config.recaptcha',
            ],
            [
                'key' => 'skip_ip',
                'value' => (app()->environment('local')) ? '127.0.0.1' : '-',
                'group' => 'config.recaptcha',
            ],
            [
                'key' => 'notify',
                'value' => (app()->environment('local')) ? 'passive' : 'active',
                'group' => 'config.authentication_log',
            ],
        ];

        $this->createSettings($data);
    }

    /**
     * Length settings.
     *
     * @return void
     */
    protected function length(): void
    {
        $data = [
            [
                'key' => 'password_min',
                'value' => 9,
                'group' => 'length',
            ],
            [
                'key' => 'password_max',
                'value' => 20,
                'group' => 'length',
            ],
            [
                'key' => 'email_min',
                'value' => 6,
                'group' => 'length',
            ],
            [
                'key' => 'email_max',
                'value' => 100,
                'group' => 'length',
            ],
            [
                'key' => 'name_min',
                'value' => 5,
                'group' => 'length',
            ],
            [
                'key' => 'name_max',
                'value' => 100,
                'group' => 'length',
            ],
        ];

        $this->createSettings($data);
    }

    /**
     * Route settings.
     *
     * @return void
     */
    protected function route(): void
    {
        $data = [
            [
                'key' => 'prefix',
                'value' => 'dashboard',
                'group' => 'route',
            ],
            [
                'key' => 'authentication',
                'value' => 25,
                'group' => 'route.rate_limit',
            ],
            [
                'key' => 'verify_email',
                'value' => 5,
                'group' => 'route.rate_limit',
            ],
            [
                'key' => 'forgot_password',
                'value' => 5,
                'group' => 'route.rate_limit',
            ],
            [
                'key' => 'reset_password',
                'value' => 5,
                'group' => 'route.rate_limit',
            ],
            [
                'key' => 'confirm_password',
                'value' => 5,
                'group' => 'route.rate_limit',
            ],
            [
                'key' => 'dashboard',
                'value' => 50,
                'group' => 'route.rate_limit',
            ],
            [
                'key' => 'login',
                'value' => 'active',
                'group' => 'route.auth',
            ],
            [
                'key' => 'register',
                'value' => 'passive',
                'group' => 'route.auth',
            ],
            [
                'key' => 'verify_email',
                'value' => 'passive',
                'group' => 'route.auth',
            ],
            [
                'key' => 'confirm_password',
                'value' => 'active',
                'group' => 'route.auth',
            ],
            [
                'key' => 'forgot_password',
                'value' => 'passive',
                'group' => 'route.auth',
            ],
            [
                'key' => 'reset_password',
                'value' => 'passive',
                'group' => 'route.auth',
            ],
        ];

        $this->createSettings($data);
    }

    /**
     * General settings.
     *
     * @return void
     */
    protected function general(): void
    {
        $data = [
            [
                'key' => 'alert_type',
                'value' => 'toast',
                'group' => 'general',
            ],
            [
                'key' => 'timer',
                'value' => 5000,
                'group' => 'general',
            ],
            [
                'key' => 'author',
                'value' => 'Ahmet ÅžEN',
                'group' => 'general',
            ],
            [
                'key' => 'default_role',
                'value' => 'user',
                'group' => 'general',
            ],
            [
                'key' => 'content_number',
                'value' => 10,
                'group' => 'general',
            ],
            [
                'key' => 'datatable_paging_type',
                'value' => 'full_numbers',
                'group' => 'general',
            ],
            [
                'key' => 'ajax_error_show_animate',
                'value' => 'animate__tada',
                'group' => 'general',
            ],
            [
                'key' => 'ajax_error_hide_animate',
                'value' => 'animate__zoomOutDown',
                'group' => 'general',
            ],
            [
                'key' => 'default_user_password',
                'value' => '=sCn4X3-K',
                'group' => 'general',
            ],
        ];

        $this->createSettings($data);
    }

    /**
     * Maintenance settings.
     *
     * @return void
     */
    protected function maintenance(): void
    {
        $data = [
            [
                'key' => 'redirect',
                'value' => '/',
                'group' => 'maintenance',
            ],
            [
                'key' => 'retry',
                'value' => 60,
                'group' => 'maintenance',
            ],
            [
                'key' => 'secret',
                'value' => Str::random(10),
                'group' => 'maintenance',
            ],
            [
                'key' => 'status',
                'value' => 503,
                'group' => 'maintenance',
            ],
            [
                'key' => 'icon',
                'value' => 'ion-ios7-cog-outline',
                'group' => 'maintenance',
            ],
            [
                'key' => 'theme',
                'value' => 'blue',
                'group' => 'maintenance',
            ],
        ];

        $this->createSettings($data);
    }

    /**
     * Dashboard theme options settings.
     *
     * @return void
     */
    protected function dashboardThemeOption(): void
    {
        $data = [
            [
                'key' => 'body_small_text',
                'value' => 'passive',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'navbar_small_text',
                'value' => 'passive',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'brand_small_text',
                'value' => 'passive',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'sidebar_small_text',
                'value' => 'passive',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'footer_small_text',
                'value' => 'passive',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'navbar_color',
                'value' => 'default',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'accent_color',
                'value' => 'default',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'sidebar_type',
                'value' => 'dark',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'sidebar_color',
                'value' => 'primary',
                'group' => 'theme.dashboard',
            ],
            [
                'key' => 'brand_color',
                'value' => 'default',
                'group' => 'theme.dashboard',
            ],
        ];

        $this->createSettings($data);
    }

    /**
     * Color settings.
     *
     * @return void
     */
    protected function color(): void
    {
        $data = [
            [
                'key' => 'show_confirm_button',
                'value' => '#3085d6',
                'group' => 'color',
            ],
            [
                'key' => 'profile_card',
                'value' => 'primary',
                'group' => 'color',
            ],
        ];

        $this->createSettings($data);
    }

    /**
     * Create settings.
     *
     * @param array $data
     * @return void
     */
    protected function createSettings(array $data = []): void
    {
        foreach ($data as $datum) {
            Setting::set($datum['key'], $datum['value'], $datum['group']);

            unset($datum);
        }
    }
}
